// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`does not filter mutations with known input types 1`] = `
"mutation fuzzer($data: FuzzInput!) {
  fuzz(data: $data)
}
"
`;

exports[`does not filter queries with known input types 1`] = `
"query getFuzz($filter: FuzzFilter!) {
  fuzz(filter: $filter)
}
"
`;

exports[`filters mutations with no operation name 1`] = `null`;

exports[`filters mutations with unknown input types 1`] = `null`;

exports[`filters out empty operations 1`] = `
"query Stay {
  random
  thing
}
"
`;

exports[`filters queries with no operation name 1`] = `null`;

exports[`filters queries with unknown input types 1`] = `null`;

exports[`it doesn't leave behind empty selections 1`] = `
"query RandomQuery {
  thing
}
"
`;

exports[`passing a string schema instead of a parsed one 1`] = `
"query RandomQuery {
  two
}
"
`;

exports[`remove variable properties from multiple and nested input types that don't exist in schema 1`] = `
Object {
  "employer": Object {
    "company": "Acme",
  },
  "user": Object {
    "address": Object {
      "city": "Kitchener",
    },
    "name": "Steve",
  },
}
`;

exports[`remove variable properties from multiple input types that don't exist in schema 1`] = `
Object {
  "address": Object {
    "city": "Kitchener",
  },
  "user": Object {
    "name": "Steve",
  },
}
`;

exports[`remove variable properties from nested input types that don't exist in schema 1`] = `
Object {
  "user": Object {
    "address": Object {
      "city": "Kitchener",
    },
    "name": "Steve",
  },
}
`;

exports[`remove variable properties that don't exist in schema 1`] = `
Object {
  "data": Object {
    "baz": "Hello",
  },
}
`;

exports[`removes fragment (its usages) and inline fragments if it has no selection 1`] = `
"query WithFragments {
  this {
    id
  }
}
"
`;

exports[`removes unused fragments 1`] = `
"query Query {
  id
}
"
`;

exports[`removing arguments that don't exist in schema 1`] = `
"query RandomQuery {
  something(bar: 4)
}
"
`;

exports[`removing fields from query that aren't in schema 1`] = `
"query RandomQuery {
  this {
    is
    a
  }
  random
  thing
}
"
`;

exports[`removing variable properties and filtering query  1`] = `
Object {
  "maskedQuery": "mutation fuzzer($data: FuzzInput!) {
  fuzz(data: $data) {
    baz
  }
}
",
  "maskedVariables": Object {
    "data": Object {
      "baz": "Hello",
    },
  },
}
`;
